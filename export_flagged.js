import fs from 'fs';

/**
 * Export flagged accounts from scan results in various formats
 * 
 * Usage:
 * node export_flagged.js <scan_results.json> --format=csv|json|md --output=<filename>
 */

// Process command line args
const args = process.argv.slice(2);
const inputFile = args.find(arg => !arg.startsWith('--')) || 'farcaster_moderation_scan.json';
const formatArg = args.find(arg => arg.startsWith('--format='));
const format = formatArg ? formatArg.split('=')[1] : 'csv';
const outputArg = args.find(arg => arg.startsWith('--output='));
const outputFile = outputArg ? outputArg.split('=')[1] : null;

// Verify input file exists
if (!fs.existsSync(inputFile)) {
  console.error(`Error: Input file '${inputFile}' not found`);
  process.exit(1);
}

// Load and parse input file
try {
  const data = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
  const flaggedAccounts = data.flaggedAccounts || [];
  
  if (flaggedAccounts.length === 0) {
    console.log('No flagged accounts found in the input file.');
    process.exit(0);
  }
  
  // Sort accounts by spam score (highest first)
  const sortedAccounts = [...flaggedAccounts].sort((a, b) => {
    const aSpam = parseFloat(a.spamScore);
    const bSpam = parseFloat(b.spamScore);
    return bSpam - aSpam;
  });
  
  let output = '';
  
  // Generate output in requested format
  if (format === 'csv') {
    // CSV Header
    output = 'username,display_name,fid,spam_score,ai_score,flags\n';
    
    // Add each account as a row
    sortedAccounts.forEach(account => {
      const flags = account.flags.join('+');
      const spamScore = parseFloat(account.spamScore);
      const aiScore = parseFloat(account.aiScore);
      
      output += `"${account.username}","${account.displayName}",${account.fid},${spamScore},${aiScore},"${flags}"\n`;
    });
  }
  else if (format === 'json') {
    // Simple JSON array with essential data
    const jsonData = sortedAccounts.map(account => ({
      username: account.username,
      displayName: account.displayName,
      fid: account.fid,
      spamScore: parseFloat(account.spamScore),
      aiScore: parseFloat(account.aiScore),
      flags: account.flags
    }));
    
    output = JSON.stringify(jsonData, null, 2);
  }
  else if (format === 'md') {
    // Markdown table
    output = `# Flagged Accounts Report
    
Date of scan: ${new Date(data.timestamp).toLocaleString()}
Total accounts scanned: ${data.totalScanned || data.totalFollowing}
Flagged accounts: ${flaggedAccounts.length}

## Flagged Accounts

| Username | Display Name | FID | Spam Score | AI Score | Flags |
|----------|--------------|-----|------------|----------|-------|
`;
    
    sortedAccounts.forEach(account => {
      output += `| ${account.username} | ${account.displayName} | ${account.fid} | ${account.spamScore} | ${account.aiScore} | ${account.flags.join(', ')} |\n`;
    });
    
    output += '\n\n*Generated by MBD Farcaster moderation tools*';
  }
  else {
    console.error(`Error: Unsupported format '${format}'. Use csv, json, or md.`);
    process.exit(1);
  }
  
  // Write output to file or console
  if (outputFile) {
    fs.writeFileSync(outputFile, output);
    console.log(`Exported ${flaggedAccounts.length} flagged accounts to ${outputFile}`);
  } else {
    console.log(output);
  }
  
} catch (error) {
  console.error(`Error exporting flagged accounts: ${error.message}`);
  process.exit(1);
} 